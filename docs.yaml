info:
  description: 'How to Use Our REST APIs


    System Surveyor''s APIs enable bi-directional communication with it''s platform.            These
    APIs provide a software layer connecting and optimizing the network to allow your
    users to create / edit /            retrieve sites & surveys, along with all of
    the associated data.


    ##Prerequisites


    In order to utilize these             APIs, you must have an Enterprise account,
    with a valid plan. Your account administrator must create an             `access_token`
    for you, which is required for each request.'
  title: System Surveyor API
  version: 2.0.0
security: jwt
paths:
  /v3/resource:
    get:
      tags:
      - Resources
      - v3
      security:
      - jwt: []
      operationId: get_resource
      summary: Fetches a binary resource and returns it as bytes.
      description: 'Resource path is a relative URL to the binary resource in EFS,
        passed in a `path` query parameter.


        Example path: `2022/08/05/207e7214-6792-4288-8820-438b1f3233be.png`

        '
      parameters:
      - name: path
        description: Relative URL of the resource
        in: path
        required: true
        schema:
          type: string
          example: 2022/08/05/207e7214-6792-4288-8820-438b1f3233be.png
      responses:
        '200':
          description: A binary resource file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      public: true
  /v3/survey_element/{survey_element_id}/resource:
    post:
      tags:
      - Resources
      - v3
      operationId: add_survey_element_resource
      summary: Sets an image to a survey element.
      parameters:
      - name: survey_element_id
        description: The external id of the surveyelement
        in: path
        required: true
      requestBody:
        content:
          application/pdf:
            schema:
              type: string
              format: binary
              example: /tmp/path-to-file.pdf
          image/jpeg:
            schema:
              type: string
              format: binary
              example: /tmp/path-to-file.jpeg
          image/jpg:
            schema:
              type: string
              format: binary
              example: /tmp/path-to-file.jpg
          image/png:
            schema:
              type: string
              format: binary
              example: /tmp/path-to-file.png
      responses:
        '200':
          description: The path to the uploaded file
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      resource_url:
                        type: string
                        example: 2022/11/01/39dace0d-7aa3-47c7-9bff-9c87fbe2c00b.png
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      public: true
  /v3/folder/{folder_id}:
    put:
      tags:
      - Folders
      - v3
      operationId: create_or_update_folder
      summary: Creates a new site/survey folder or updates an existing one if found.
      description: 'To create/update a site folder, pass a value for `team_id` field
        in the request payload, to create/update a survey folder

        pass a value for `site_id` field.

        '
      parameters:
      - name: folder_id
        description: Folder ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderSchema'
      responses:
        '200':
          description: Folder updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSchema'
        '201':
          description: Folder created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSchema'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
    delete:
      tags:
      - Folders
      - v3
      operationId: delete_folder
      summary: Soft deletes a site folder or a survey folder.
      description: 'Folder must be empty in order to be deleted.


        Only account admins, team admins, and team members can delete folders. Only
        team members with write access can delete survey

        folders.

        '
      parameters:
      - name: folder_id
        description: Folder ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      public: true
  /v3/site_folder:
    post:
      tags:
      - Folders
      - v3
      operationId: create_site_folder
      summary: Creates a new folder that can hold sites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Folder
                  description: Folder name. Does not need to be unique
                  required: true
                label:
                  type: string
                  example: S0124
                team_id:
                  type: integer
                  required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSchema'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      public: true
  /v3/site_folder/{folder_external_id}:
    patch:
      tags:
      - Folders
      - v3
      operationId: update_folder
      summary: Update all fields of a folder
      parameters:
      - name: id
        description: Folder ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Folder
                  description: Folder name. Does not need to be unique
                  required: true
                label:
                  type: string
                  example: ER-1233
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSchema'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      public: true
  /v3/{site_id}/folder:
    post:
      tags:
      - Folders
      - v3
      operationId: create_survey_folder
      summary: Allows creating folders inside a site, which can store and organize
        surveys
      parameters:
      - name: site_id
        description: Site external ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Folder
                  description: Folder name. Does not need to be unique
                  required: true
                label:
                  type: string
                  example: LS1-34
                  description: Folder label
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderSchema'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      public: true
  /v3/survey_folder/{folder_id}:
    delete:
      tags:
      - Folders
      - v3
      operationId: delete_survey_folder
      summary: Deletes a survey folder in a site.
      description: 'Folders that already contain surveys are not allowed to be deleted.


        Only team members with write access can delete survey folders.

        '
      parameters:
      - name: folder_id
        description: Folder ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
  /v3/site_folder/{folder_id}:
    delete:
      tags:
      - Folders
      - v3
      operationId: delete_site_folder
      summary: Soft deletes a folder that can contain sites.
      description: 'Folder must be empty in order to be deleted. Only account admins,
        team admins, and team members can delete folders.

        '
      parameters:
      - name: folder_id
        description: Folder ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      public: true
  /v3/report:
    post:
      tags:
      - Reports
      - v3
      summary: Queues a message for creating reports for sites or surveys
      operationId: create_report
      description: 'Reports are created by an external PHP service by picking up messages
        from the queue.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyReportRequestSchema'
      responses:
        '202':
          description: Report scheduled successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
  /v3/site/{site_id}:
    get:
      tags:
      - Sites
      - v3
      operationId: get_site
      summary: Get site information
      parameters:
      - name: site_id
        in: path
        required: true
        schema:
          type: string
          example: 074bb7b5-86d2-4ea6-9851-7f8a4397844f
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 46787da3-1e6e-4d9b-a858-ac9e12dc3efb
                  team_id:
                    type: integer
                  name:
                    type: string
                  label:
                    type: string
                  survey_count:
                    type: integer
                  city:
                    type: string
                  state:
                    type: string
                  street:
                    type: string
                  zip_code:
                    type: string
                  is_active:
                    type: boolean
                  version:
                    type: integer
                  reference_id:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  creator:
                    type: object
                    properties:
                      user_id:
                        type: integer
                      first_name:
                        type: string
                      last_name:
                        type: string
                  modifier:
                    type: object
                    properties:
                      user_id:
                        type: integer
                      first_name:
                        type: string
                      last_name:
                        type: string
                  created_at:
                    type: integer
                    example: 1452384000
                  modified_at:
                    type: integer
                    example: 1673557029
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      public: true
    put:
      tags:
      - Sites
      - v3
      operationId: create_or_update_site
      summary: Creates a new site with a specific `external_id` or updates the site
        if it already exists
      description: 'Pass a folder external ID in a `folder_external_id` field in the
        payload to create the site inside that folder.

        '
      parameters:
      - name: site_id
        description: Site ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteSchema'
      responses:
        '200':
          description: Successful update
        '201':
          description: Successful create
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
    patch:
      tags:
      - Sites
      - v3
      operationId: patch_site
      summary: Update specific fields of a site
      parameters:
      - name: site_id
        description: Site ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteSchema'
      responses:
        '200':
          description: Successful update
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
    delete:
      tags:
      - Sites
      - v3
      operationId: delete_site
      summary: Hard deletes a site and all related objects.
      parameters:
      - name: site_id
        description: Site ID
        in: path
        required: true
        schema:
          type: string
          example: 40759717-c239-4504-a0a5-7e7f57220995
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
  /v3/sites:
    get:
      tags:
      - Sites
      - v3
      operationId: get_user_sites_and_folders
      summary: Returns all archived/unarchived sites and folders across all teams
        of a user.
      description: "Explanation of usage of filters:\n\nFiltered by favorites:\n \
        \ - All sites that are in workbench but not in a folder\n  - All folders that\
        \ have a site under them that is in the workbench\n  - Don\u2019t return sites\
        \ that are in workbench but also in a folder\n\nFiltered by folder and favorites:\n\
        \  - All sites in the folder that are in the workbench\n\nFiltered by folder:\n\
        \  - All sites in folder\n"
      parameters:
      - $ref: '#/components/parameters/page[number]'
      - $ref: '#/components/parameters/page[size]'
      - name: filter[modified_after]
        description: Return only sites that have been created, modified, or favorited
          (added to workbench) after an specific datetime (in UTC Epoch format).
        in: query
        schema:
          type: integer
          example: 1645157198
      - name: filter[deleted_after]
        description: Return only sites that were deleted after an specified timestamp.
          Limited site data is returned using this filter.
        in: query
        schema:
          type: integer
          example: 56489413165
      - name: filter[favorites_only]
        description: Filters results to only include sites the user has added to their
          workbench
        in: query
        schema:
          type: integer
          example: 1
      - name: filter[folder_id]
        description: Returns only sites that belong to a specific folder
        in: query
        schema:
          type: string
          example: 963dcf8a-9c99-4da0-adeb-12b86d99b122
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sites:
                    type: array
                    description: Result list of sites or folders
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 46787da3-1e6e-4d9b-a858-ac9e12dc3efb
                        name:
                          type: string
                          example: Union Square
                        survey_count:
                          type: integer
                          example: 12
                        modified_at:
                          type: integer
                          description: 'Datetime of the most recently modified survey
                            in the site. If the site has no surveys, falls back to
                            the

                            site''s own `modified_at` datetime.

                            '
                          example: 1644374426
                        owner:
                          type: object
                          properties:
                            user_id:
                              type: integer
                              example: 12390
                            first_name:
                              type: string
                              example: John
                            last_name:
                              type: string
                              example: Doe
                        modifier:
                          type: object
                          properties:
                            user_id:
                              type: integer
                              example: 12390
                            first_name:
                              type: string
                              example: John
                            last_name:
                              type: string
                              example: Doe
                        team:
                          type: object
                          properties:
                            team_id:
                              type: integer
                              example: 1049
                            name:
                              type: string
                              name: John Doe's team
                        type:
                          type: string
                          example: site
                          description: If the result item is a site or a folder
                          enum:
                          - site
                          - folder
                        version:
                          type: integer
                          example: 45479945
                        favorite_timestamp:
                          type: integer
                          example: 12034903409
                          description: Timestamp of when the site was added to favorites
                        has_favorite_sites:
                          type: boolean
                          example: true
                          description: Indicates if a folder has sites that are in
                            the user's workbench
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      public: true
    delete:
      tags:
      - Sites
      - v3
      operationId: delete_sites
      summary: Allows for batch deleting of sites (and all related data).
      description: 'Users must be team members and have write access on all sites
        to be deleted, otherwise the entire operation will fail.

        Guest users are not allowed to batch delete sites.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: Site external ID
                example: b14663f6-9ad1-40c0-8a1a-32f2e19b1ccb
                required: true
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /v3/site/{site_id}/surveys:
    get:
      tags:
      - Surveys
      - v3
      operationId: get_site_surveys_and_folders
      summary: Returns all surveys and folders for a specific site. These are shown
        in the site overview page.
      description: 'Surveys that belong to folders will not be included in the response,
        unless

        a search is being made.


        Results are ordered by `title` ascending by default if no sorting is specified.


        Query Parameters:


        - q: Search surveys and folders.


        - filter[status]: Return only surveys in a specific status (`archived` or
        `open`). Folders will also be returned in the response.

        - filter[external_folder_id]: Filter surveys by folder using string of external_id
        (UUID). Only surveys will be returned.

        - filter[modified_after]: Return surveys and folders that have been created
        or modified after a timestamp (in UTC Epoch format).

        - filter[deleted_after]: Return surveys and folders that have been deleted
        after the specified timestamp.


        - page[number]: Page to retrieve from the entire result set.

        - page[size]: Max amount of objects to return per page in the response. Defaults
        to 100.


        - sort: Sort by fields (comma separated). Use `-` prefix on field name to
        sort descending.

        '
      parameters:
      - name: site_id
        description: Site ID
        in: path
        required: true
        schema:
          type: string
          example: 86af1f1d-4f19-4c6c-afd6-e5ee041666ce
      - name: filter[status]
        description: Return only surveys in a specific status (`archived` or `open`).
        in: query
        schema:
          type: string
          enum:
          - archived
          - open
      - name: filter[external_folder_id]
        description: Filter surveys by folder using string of external_id (UUID)
        in: query
        schema:
          type: string
          example: b14663f6-9ad1-40c0-8a1a-32f2e19b1ccb
      - name: filter[modified_after]
        description: Return only surveys and folders that have been created or modified
          after a timestamp (in UTC Epoch format).
        in: query
        schema:
          type: number
          example: 1658776598
      - name: filter[deleted_after]
        description: Return surveys and folders that have been deleted after the specified
          timestamp.
        in: query
        schema:
          type: number
          example: 1658776598
      - name: sort
        description: Sort by column names (comma separated). Use `-` prefix on column
          name to sort descending
        in: query
        schema:
          type: string
          example: sort=-is_folder,name,editor_first_name
          enum:
          - id
          - title
          - document_image_url
          - editor_id
          - editor_first_name
          - editor_last_name
          - comments_count
          - elements_count
          - is_folder
          - created_at
          - modified_at
          - status
          - survey_count
      - $ref: '#/components/parameters/q'
      - $ref: '#/components/parameters/page[number]'
      - $ref: '#/components/parameters/page[size]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  surveys:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: b14663f6-9ad1-40c0-8a1a-32f2e19b1ccb
                        title:
                          type: string
                          example: My survey
                        label:
                          type: string
                          example: TGS-123
                        is_folder:
                          type: boolean
                          example: false
                        preview_image:
                          type: string
                          description: URL to the survey's preview image
                        elements_count:
                          type: integer
                          description: Element count for survey
                          example: 90
                        survey_count:
                          type: integer
                          description: Survey count for folder
                          example: 34
                        is_archived:
                          type: boolean
                          example: false
                          description: If the survey is archived or not
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
  /v3/site/{site_id}/survey/{survey_id}:
    put:
      tags:
      - Surveys
      - v3
      operationId: create_or_update_survey
      summary: Allows creating a new survey with a unique identifier generated by
        the client, or updates the existing survey with that identifier if it exists.
      description: 'Also allows creating/updating surveys with elements, comments,
        and annotations.

        '
      parameters:
      - name: site_id
        description: Site external ID
        in: path
        required: true
        schema:
          type: string
          example: 86af1f1d-4f19-4c6c-afd6-e5ee041666ce
      - name: survey_id
        description: Survey external ID
        in: path
        required: true
        schema:
          type: string
          example: 86af1f1d-4f19-4c6c-afd6-e5ee041666ce
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveySchema'
      responses:
        '200':
          description: Survey updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySchema'
        '201':
          description: Survey created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveySchema'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
  /v3/survey/{survey_id}:
    delete:
      tags:
      - Surveys
      - v3
      operationId: delete_survey
      summary: Deletes a survey and all its related objects
      description: 'Also expires any shares of the survey.

        '
      parameters:
      - name: survey_id
        description: Survey ID
        in: path
        required: true
        schema:
          type: string
          example: 86af1f1d-4f19-4c6c-afd6-e5ee041666ce
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      public: true
  /v3/teams:
    get:
      tags:
      - Teams
      - v3
      operationId: get_user_teams
      summary: Returns all the teams the current user is a member of
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          $ref: '#/components/schemas/string'
                      id:
                        type: string
                      attributes:
                        type: object
                        properties:
                          name:
                            type: string
                          unit:
                            type: string
                            enum:
                            - metric
                            - imperaial_standard
                          logo_url:
                            type: string
                          labor_rate:
                            type: number
                            format: float
                          margin_range:
                            type: number
                          budget_status:
                            type: integer
                      relationships:
                        type: object
                        properties:
                          account:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                  id:
                                    type: string
                          owner:
                            type: object
                            properties:
                              data:
                                type: object
                                properties:
                                  type:
                                    type: string
                                  id:
                                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      public: true
  /v3/user:
    get:
      tags:
      - Users
      - v3
      operationId: get_current_user_data
      summary: Get data for the current authenticated user
      description: 'This includes accounts and teams that the current user belongs
        to, either as a team member or a guest user.

        '
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12094
                  user_name:
                    type: string
                    example: foobar
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  title:
                    type: string
                    example: CEO
                  email:
                    type: string
                    example: foobar@gmail.com
                  company:
                    type: string
                    example: System Surveyor
                  mobile:
                    type: string
                    example: 910-423-345
                  country:
                    type: string
                  state:
                    type: string
                  last_login:
                    type: number
                  avatar_url:
                    type: string
                  is_complete_setup:
                    type: boolean
                  created_at:
                    type: integer
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 112
                        name:
                          type: string
                          example: John's Team
                        account_id:
                          type: integer
                          example: 995
                        role:
                          type: string
                          example: team_member
                        unit:
                          type: string
                          example: metric
                          enum:
                          - metric
                          - imperial
                        labor_rate:
                          type: float
                        budget_status:
                          type: integer
                        margin_range:
                          type: float
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 450495
                        company:
                          type: string
                        is_trial:
                          type: boolean
                        is_free:
                          type: boolean
                        cancel_requested:
                          type: boolean
                        subscription:
                          type: object
                          properties:
                            id:
                              type: integer
                            quantity:
                              type: integer
                            end_date:
                              type: integer
                            plan:
                              type: object
                              properties:
                                id:
                                  type: integer
                                name:
                                  type: string
                                max_seats:
                                  type: integer
                                max_attachments_per_element:
                                  type: integer
                        features:
                          type: object
                          properties:
                            comments:
                              type: boolean
                            site_tagging:
                              type: boolean
                            report_custom_watermark:
                              type: boolean
                            exclude_powered_by:
                              type: boolean
                            sso:
                              type: boolean
                            hidden_attributes:
                              type: boolean
                            site_access_permissions:
                              type: boolean
                            multiple_teams:
                              type: boolean
                            report_include_ssv_logo:
                              type: boolean
                            report_include_company_logo:
                              type: boolean
                            guest_user:
                              type: boolean
                            add_folder:
                              type: boolean
                            export_survey:
                              type: boolean
                            report_export_excel:
                              type: boolean
                            report_require_ssv_watermark:
                              type: boolean
                            v2_survey:
                              type: boolean
                            public_api:
                              type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      public: true
    patch:
      tags:
      - Users
      - v3
      operationId: update_user
      summary: Update user information associated with the linked account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                user_name:
                  type: string
                company:
                  type: string
                mobile:
                  type: string
                title:
                  type: string
                country:
                  type: string
                state:
                  type: string
                city:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 12094
                  user_name:
                    type: string
                    example: foobar
                  first_name:
                    type: string
                    example: John
                  last_name:
                    type: string
                    example: Doe
                  title:
                    type: string
                    example: CEO
                  email:
                    type: string
                    example: foobar@gmail.com
                  company:
                    type: string
                    example: System Surveyor
                  mobile:
                    type: string
                    example: 910-423-345
                  country:
                    type: string
                  state:
                    type: string
                  last_login:
                    type: number
                  avatar_url:
                    type: string
                  is_complete_setup:
                    type: boolean
                  created_at:
                    type: integer
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 112
                        name:
                          type: string
                          example: John's Team
                        account_id:
                          type: integer
                          example: 995
                        role:
                          type: string
                          example: team_member
                        unit:
                          type: string
                          example: metric
                          enum:
                          - metric
                          - imperial
                        labor_rate:
                          type: float
                        budget_status:
                          type: integer
                        margin_range:
                          type: float
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 450495
                        company:
                          type: string
                        is_trial:
                          type: boolean
                        is_free:
                          type: boolean
                        cancel_requested:
                          type: boolean
                        features:
                          type: object
                          properties:
                            comments:
                              type: boolean
                            site_tagging:
                              type: boolean
                            multiple_teams:
                              type: boolean
                            site_access_permissions:
                              type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
      public: true
openapi: 3.1.0
components:
  schemas:
    UserResponse:
      type: object
      properties:
        user_id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
      required:
      - user_id
    SiteSchema:
      type: object
      properties:
        name:
          type: string
          maxLength: 250
        zip_code:
          type: string
          maxLength: 250
        version:
          type: integer
          readOnly: true
        modified_at:
          readOnly: true
          type:
          - 'null'
        state:
          type: string
          maxLength: 250
        reference_id:
          type: string
          maxLength: 255
        label:
          type: string
          maxLength: 255
        creator:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/UserResponse'
        modifier:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/UserResponse'
        created_at:
          readOnly: true
          type:
          - 'null'
        street:
          type: string
          maxLength: 250
        is_archived: {}
        tags:
          type: array
          items:
            type: string
        city:
          type: string
          maxLength: 250
        team_id:
          type: integer
        site_id:
          type: string
        legacy_site_id:
          type: integer
          readOnly: true
      required:
      - name
      - team_id
    ShareSiteOrSurveyRequestSchema:
      type: object
      properties:
        emails:
          type: array
          items:
            type: string
            format: email
        modified_at:
          readOnly: true
          type:
          - 'null'
        created_at:
          readOnly: true
          type:
          - 'null'
        expiration_date: {}
        message:
          type: string
      required:
      - emails
      - expiration_date
    SurveyFields:
      type: object
      properties:
        value:
          type: string
        field_id:
          type: string
      required:
      - field_id
      - value
    SurveyOptions:
      type: object
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/SurveyFields'
        value:
          type: boolean
        id:
          type: string
        scope:
          type: string
          enum:
          - template
          - model
          - content
        template_name:
          type: string
      required:
      - id
      - scope
      - value
    SurveyReportRequestSchema:
      type: object
      properties:
        output:
          type: string
          enum:
          - pdf
          - html
          - xls
        name:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/SurveyOptions'
        paper_size:
          type: string
        is_site_report:
          type: boolean
          default: false
        survey_ids:
          type: array
          items:
            type: string
        is_excel:
          type: boolean
          default: false
        custom_data:
          type: object
        filters:
          type: array
          items:
            type: object
        site_id:
          type: string
        report_id:
          type: string
          format: uuid
      required:
      - name
      - output
      - report_id
      - site_id
    SurveyReportRequestSchemaDeprecated:
      type: object
      properties:
        output:
          type: string
          enum:
          - pdf
          - html
          - xls
        name:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/SurveyOptions'
        paper_size:
          type: string
        ids:
          type: array
          items:
            type: string
        is_site_report:
          type: boolean
          default: false
        is_excel:
          type: boolean
          default: false
        custom_data:
          type: object
        filters:
          type: array
          items:
            type: object
        site_id:
          type: string
        report_id:
          type: string
          format: uuid
      required:
      - name
      - output
      - report_id
      - site_id
    EPAccessory:
      type: object
      properties:
        description:
          type: string
        model:
          type: string
          default: ''
        labor_hours:
          type:
          - number
          - 'null'
          default: !!python/object/apply:decimal.Decimal
          - 0E-10
        created_at:
          readOnly: true
        id:
          type: integer
          readOnly: true
        manufacturer:
          type: string
          default: ''
        price:
          type:
          - number
          - 'null'
          default: !!python/object/apply:decimal.Decimal
          - 0E-10
      required:
      - description
    SubElement:
      type: object
      properties:
        systemtype_id:
          type: string
        element_id:
          type: string
      required:
      - element_id
      - systemtype_id
    Link:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: url
        link_type:
          type: integer
      required:
      - link_type
      - name
      - url
    Attribute:
      type: object
      properties:
        value:
          type: string
        attribute_id:
          type: integer
      required:
      - attribute_id
      - value
    EPContent:
      type: object
      properties:
        child:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/SubElement'
        pdf_url:
          type: array
          default: []
          maxItems: 2
          items:
            $ref: '#/components/schemas/Link'
        attribute:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/Attribute'
    ElementProfileSchema:
      type: object
      properties:
        name:
          type: string
        is_default:
          type: boolean
        modified_at:
          readOnly: true
        accessories:
          type: array
          items:
            $ref: '#/components/schemas/EPAccessory'
        element_id:
          type: integer
        created_by:
          type: integer
          readOnly: true
        created_at:
          readOnly: true
        id:
          type: integer
          readOnly: true
        sort:
          type: integer
        content:
          $ref: '#/components/schemas/EPContent'
        team_id:
          type: integer
      required:
      - content
      - element_id
      - name
      - team_id
    FolderSchema:
      type: object
      properties:
        site_external_id:
          type: string
          writeOnly: true
        label:
          type: string
        team_id:
          type: integer
        name:
          type: string
        site_id:
          type: integer
          readOnly: true
        id:
          type: string
          readOnly: true
      required:
      - name
    RelatedUser:
      type: object
      properties:
        first_name:
          type: string
        user_id: {}
        last_name:
          type: string
    SurveyAttribute:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: string
        name:
          type: string
        attribute_id:
          type: integer
      required:
      - attribute_id
      - name
      - value
    SurveyElementAccessory:
      type: object
      properties:
        description:
          type: string
        row_index:
          type: integer
        model:
          type: string
        labor_hours:
          type: number
        quantity: {}
        id:
          type: string
          readOnly: true
        manufacturer:
          type: string
        price: {}
      required:
      - manufacturer
      - model
      - row_index
    CablePath:
      type: object
      properties:
        z_side: {}
        type:
          type: string
        id:
          type: string
        a_side: {}
      required:
      - a_side
      - id
      - z_side
    PathConnection:
      type: object
      properties:
        start: {}
        end: {}
    SurveyElementActivityLog:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        date:
          readOnly: true
        entry:
          type: string
    SurveyElement:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        element_id:
          type: integer
        element_index:
          type: integer
        element_profile_id:
          type: integer
        systemtype_id:
          type: integer
        variant: {}
        z_order:
          type: integer
        position: {}
        photo_urls:
          type: array
          items:
            type: string
        pdf_urls:
          type: array
          items:
            type: object
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/SurveyAttribute'
        accessories:
          type: array
          items:
            $ref: '#/components/schemas/SurveyElementAccessory'
        children:
          type: array
          items:
            $ref: '#/components/schemas/SurveyElement'
        cables:
          type: array
          items:
            $ref: '#/components/schemas/CablePath'
        connections:
          $ref: '#/components/schemas/PathConnection'
        activity_log:
          type: array
          items:
            $ref: '#/components/schemas/SurveyElementActivityLog'
      required:
      - element_id
      - id
      - name
      - position
      - systemtype_id
    SurveyAnnotation:
      type: object
      properties:
        start_point: {}
        location: {}
        size:
          type: string
        category: {}
        stroke_width:
          type: string
        stroke_color:
          type: string
        font_size:
          type: string
        end_point: {}
        id:
          type: string
          readOnly: true
        text:
          type: string
      required:
      - category
      - location
      - stroke_color
      - stroke_width
    SurveySchema:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        label:
          type: string
        reference_id:
          type: string
        description:
          type: string
        summary:
          type: string
        location:
          type: string
        status:
          writeOnly: true
        site:
          readOnly: true
        icon_size:
          type: integer
        is_archived:
          type: boolean
          readOnly: true
        unit: {}
        version:
          type: integer
          readOnly: true
        margin_range:
          type: number
        type:
          readOnly: true
        floorplan_scale:
          type: number
        preview_image:
          type: string
          readOnly: true
        floorplan_url:
          type: string
          readOnly: true
        sync_status:
          readOnly: true
          enum:
          - synced
          - pending
          - errored
        creator:
          type: integer
          readOnly: true
        editor:
          readOnly: true
          allOf:
          - $ref: '#/components/schemas/RelatedUser'
        modifier:
          type: integer
          readOnly: true
        created_at:
          readOnly: true
        modified_at:
          readOnly: true
        elements:
          type: array
          items:
            $ref: '#/components/schemas/SurveyElement'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/SurveyAnnotation'
        users:
          readOnly: true
      required:
      - icon_size
      - margin_range
      - title
      - unit
  responses:
    BadRequestError:
      description: Invalid request sent to endpoint
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Invalid permissions to perform operation
    NotFoundError:
      description: The specified resource was not found
    UnprocessableEntityError:
      description: Unable to process the contained instructions
  parameters:
    q:
      name: q
      description: Apply search to query
      schema:
        type: string
      in: query
    page:
      name: page
      description: Page to retrieve from the entire result set
      schema:
        type: integer
        minimum: 1
        default: 1
      in: query
    page_size:
      name: page_size
      description: Max amount of objects to return per page in the response
      schema:
        type: integer
        maximum: 100
        default: 100
      in: query
    page[number]:
      name: page[number]
      description: Page to retrieve from the entire result set
      schema:
        type: integer
        minimum: 1
        default: 1
      in: query
    page[size]:
      name: page[size]
      description: Max amount of objects to return per page in the response
      schema:
        type: integer
        maximum: 100
        default: 100
      in: query
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Once the account administrator creates your API `access_token`\
        \         ([link](https://app.systemsurveyor.com/v2/account/#api_management)),\
        \ you must include that with each request.         These tokens are valid\
        \ for 1 year, and can be revoked at any time by the account administrator.\
        \         Here is a sample request:\n\n```\ncurl --location --request GET\
        \ 'https://openapi.systemsurveyor.com/v3/user' \\         \n--header 'Authorization:\
        \ Bearer <<TOKEN>>'\n```"

